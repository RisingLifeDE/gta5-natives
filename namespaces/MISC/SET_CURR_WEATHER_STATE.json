{
    "0x578C752848ECFA0C": {
        "name": "SET_CURR_WEATHER_STATE",
        "jhash": "0x5CA74040",
        "comment": "Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:\n\nexecute \"NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(\"\"RAIN\"\"), Game.GetHashKey(\"\"SMOG\"\"), 0.50f);\n\nNote that unlike most of the other weather natives, this native takes the hash of the weather name, not the plain string. These are the weather names and their hashes:\n\nCLEAR  0x36A83D84\nEXTRASUNNY  0x97AA0A79\nCLOUDS  0x30FDAF5C\nOVERCAST    0xBB898D2D\nRAIN    0x54A69840\nCLEARING    0x6DB1A50D\nTHUNDER 0xB677829F\nSMOG    0x10DCF4B5\nFOGGY   0xAE737644\nXMAS    0xAAC9C895\nSNOWLIGHT   0x23FB812B\nBLIZZARD    0x27EA2814\n\n\n\n\n\n/* OLD INVALID INFO BELOW */\nNot tested. Based purely on disassembly. Instantly sets the weather to sourceWeather, then transitions to targetWeather over the specified transitionTime in seconds.\n\nIf an invalid hash is specified for sourceWeather, the current weather type will be used.\nIf an invalid hash is specified for targetWeather, the next weather type will be used.\nIf an invalid hash is specified for both sourceWeather and targetWeather, the function just changes the transition time of the current transition.",
        "params": [
            {
                "type": "Hash",
                "name": "weatherType1"
            },
            {
                "type": "Hash",
                "name": "weatherType2"
            },
            {
                "type": "float",
                "name": "percentWeather2"
            }
        ],
        "return_type": "void",
        "build": "323",
        "old_names": [
            "_SET_WEATHER_TYPE_TRANSITION"
        ]
    }
}